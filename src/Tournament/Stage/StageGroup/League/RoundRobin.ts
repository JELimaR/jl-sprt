import { arr2 } from "../../../types";

const robinRoundSchedulingFunction = (n: number, opt: 'home' | 'h&a' | 'neutral'): arr2<number>[][] => {
  const isN = opt == 'neutral';
  if (n < 2 || n > 20 || n % 1 !== 0) {
		throw new Error(`no existe sch para el valor: ${n}`)
	}
	let out: arr2<number>[][] = getBasicScheduling[n-2]();

	if (isN) {
		let aux = [...out];
		out = [];
		aux.forEach((rnd: arr2<number>[]) => {
			let raux: arr2<number>[] = [];
			rnd.forEach((m: arr2<number>) => {
				m = neutral(m);
				raux.push(m);
				// console.log(m);
			})
			out.push(raux);
		})
	} else {

		if (opt == 'h&a') {
			let aux = [...out];
			aux.forEach((rnd: arr2<number>[]) => {
				let raux: arr2<number>[] = [];
				rnd.forEach((m: arr2<number>) => {
					m = reverse(m);
					raux.push(m);
				})
				out.push(raux);
			})
		}
	}
	
	return out;
}

const reverse = (a: arr2<number>): arr2<number> => {
	return [a[1], a[0]];
}

const neutral = (a: arr2<number>): arr2<number> => {
	if (a[0] < a[1]) {
		return a;
	} else {
		return reverse(a);
	}
}

const m2 = (): arr2<number>[][] => {
	return [
		[[1,2]]
	]
}

const m3 = (): arr2<number>[][] => {
	return [
		[[1,2]],
		[[3,1]],
		[[2,3]],
	]
}

const m4 = (): arr2<number>[][] => {
	return [
		[[1,2],[4,3]],
		[[3,1],[2,4]],
		[[1,4],[2,3]],
	];
}

const m5 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4]],
		[[3,1],[2,5]],
		[[2,3],[1,4]],
		[[5,1],[4,3]],
		[[2,4],[3,5]],
	];
}

const m6 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4],[6,3]],
		[[3,1],[4,6],[2,5]],
		[[2,3],[6,5],[1,4]],
		[[5,1],[6,2],[4,3]],
		[[1,6],[2,4],[3,5]],
	];
}

const m7 = (): arr2<number>[][] => {
	return [
		[[1,2],[4,3],[6,5]],
		[[3,1],[2,4],[5,7]],
		[[1,4],[2,3],[7,6]],
		[[5,1],[6,2],[7,3]],
		[[1,6],[2,7],[4,5]],
		[[7,1],[5,3],[6,4]],
		[[2,5],[3,6],[4,7]]
	];
}

const m8 = (): arr2<number>[][] => {
	return [
		[[1,2],[4,3],[6,5],[7,8]],
		[[3,1],[2,4],[5,7],[8,6]],
		[[1,4],[2,3],[8,5],[7,6]],
		[[5,1],[6,2],[7,3],[8,4]],
		[[1,6],[2,7],[3,8],[4,5]],
		[[7,1],[8,2],[5,3],[6,4]],
		[[1,8],[2,5],[3,6],[4,7]]
	];
}

const m9 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4],[7,6],[8,3]],
		[[3,1],[2,5],[6,8],[4,9]],
		[[2,3],[1,4],[8,7],[9,6]],
		[[5,1],[4,3],[8,9],[7,2]],
		[[2,4],[3,5],[9,7],[1,6]],
		[[1,7],[2,8],[3,9],[5,6]],
		[[8,1],[9,2],[6,4],[7,5]],
		[[1,9],[3,6],[4,7],[5,8]],
		[[6,2],[7,3],[8,4],[9,5]]
	];
}

const m10 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4],[7,6],[9,10],[8,3]],
		[[3,1],[2,5],[6,8],[10,7],[4,9]],
		[[2,3],[1,4],[8,7],[9,6],[5,10]],
		[[5,1],[4,3],[6,10],[8,9],[7,2]],
		[[2,4],[3,5],[9,7],[10,8],[1,6]],
		[[1,7],[2,8],[3,9],[4,10],[5,6]],
		[[8,1],[9,2],[10,3],[6,4],[7,5]],
		[[1,9],[2,10],[3,6],[4,7],[5,8]],
		[[10,1],[6,2],[7,3],[8,4],[9,5]]
	];
}

const m11 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4],[6,3],[8,7],[10,11]],
		[[3,1],[4,6],[2,5],[7,9],[11,8]],
		[[2,3],[6,5],[1,4],[9,8],[10,7]],
		[[5,1],[6,2],[4,3],[7,11],[9,10]],
		[[1,6],[2,4],[3,5],[10,8],[11,9]],
		[[7,1],[8,2],[9,3],[10,4],[11,5]],
		[[1,8],[2,9],[3,10],[4,11],[6,7]],
		[[9,1],[10,2],[11,3],[7,5],[8,6]],
		[[1,10],[2,11],[4,7],[5,8],[6,9]],
		[[11,1],[7,3],[8,4],[9,5],[10,6]],
		[[2,7],[3,8],[4,9],[5,10],[6,11]]
	];
}

const m12 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4],[6,3],[8,7],[10,11],[9,12]],
		[[3,1],[4,6],[2,5],[7,9],[12,10],[11,8]],
		[[2,3],[6,5],[1,4],[9,8],[11,12],[10,7]],
		[[5,1],[6,2],[4,3],[7,11],[8,12],[9,10]],
		[[1,6],[2,4],[3,5],[12,7],[10,8],[11,9]],
		[[7,1],[8,2],[9,3],[10,4],[11,5],[12,6]],
		[[1,8],[2,9],[3,10],[4,11],[5,12],[6,7]],
		[[9,1],[10,2],[11,3],[12,4],[7,5],[8,6]],
		[[1,10],[2,11],[3,12],[4,7],[5,8],[6,9]],
		[[11,1],[12,2],[7,3],[8,4],[9,5],[10,6]],
		[[1,12],[2,7],[3,8],[4,9],[5,10],[6,11]]
	];
}

const m13 = (): arr2<number>[][] => {
	return [
		[[1,2],[4,3],[6,5],[9,8],[10,11],[12,13]],
		[[3,1],[2,4],[5,7],[8,10],[11,9],[6,13]],
		[[1,4],[2,3],[7,6],[11,8],[10,9],[12,5]],
		[[5,1],[6,2],[7,3],[8,12],[9,13],[4,11]],
		[[1,6],[2,7],[4,5],[13,8],[12,11],[3,10]],
		[[7,1],[5,3],[6,4],[10,12],[11,13],[9,2]],
		[[2,5],[3,6],[4,7],[12,9],[13,10],[1,8]],
		[[9,1],[10,2],[11,3],[12,4],[13,5],[8,7]],
		[[1,10],[2,11],[3,12],[4,13],[6,8],[7,9]],
		[[11,1],[12,2],[13,3],[8,5],[9,6],[10,7]],
		[[1,12],[2,13],[4,8],[5,9],[6,10],[7,11]],
		[[13,1],[8,3],[9,4],[10,5],[11,6],[12,7]],
		[[2,8],[3,9],[4,10],[5,11],[6,12],[7,13]]
	];
}

const m14 = (): arr2<number>[][] => {
	return [
		[[1,2],[4,3],[6,5],[9,8],[10,11],[12,13],[7,14]],
		[[3,1],[2,4],[5,7],[8,10],[11,9],[14,12],[6,13]],
		[[1,4],[2,3],[7,6],[11,8],[10,9],[13,14],[12,5]],
		[[5,1],[6,2],[7,3],[8,12],[9,13],[10,14],[4,11]],
		[[1,6],[2,7],[4,5],[13,8],[14,9],[12,11],[3,10]],
		[[7,1],[5,3],[6,4],[8,14],[10,12],[11,13],[9,2]],
		[[2,5],[3,6],[4,7],[12,9],[13,10],[14,11],[1,8]],
		[[9,1],[10,2],[11,3],[12,4],[13,5],[14,6],[8,7]],
		[[1,10],[2,11],[3,12],[4,13],[5,14],[6,8],[7,9]],
		[[11,1],[12,2],[13,3],[14,4],[8,5],[9,6],[10,7]],
		[[1,12],[2,13],[3,14],[4,8],[5,9],[6,10],[7,11]],
		[[13,1],[14,2],[8,3],[9,4],[10,5],[11,6],[12,7]],
		[[1,14],[2,8],[3,9],[4,10],[5,11],[6,12],[7,13]]
	];
}

const m15 = (): arr2<number>[][] => {
	return [
		[[1,2],[4,3],[6,5],[7,8],[10,9],[11,12],[13,14]],
		[[3,1],[2,4],[5,7],[8,6],[9,11],[12,10],[15,13]],
		[[1,4],[2,3],[8,5],[7,6],[12,9],[11,10],[14,15]],
		[[5,1],[6,2],[7,3],[8,4],[9,13],[10,14],[11,15]],
		[[1,6],[2,7],[3,8],[4,5],[14,9],[15,10],[13,12]],
		[[7,1],[8,2],[5,3],[6,4],[9,15],[11,13],[12,14]],
		[[1,8],[2,5],[3,6],[4,7],[13,10],[14,11],[15,12]],
		[[9,1],[10,2],[11,3],[12,4],[13,5],[14,6],[15,7]],
		[[1,10],[2,11],[3,12],[4,13],[5,14],[6,15],[8,9]],
		[[11,1],[12,2],[13,3],[14,4],[15,5],[9,7],[10,8]],
		[[1,12],[2,13],[3,14],[4,15],[6,9],[7,10],[8,11]],
		[[13,1],[14,2],[15,3],[9,5],[10,6],[11,7],[12,8]],
		[[1,14],[2,15],[4,9],[5,10],[6,11],[7,12],[8,13]],
		[[15,1],[9,3],[10,4],[11,5],[12,6],[13,7],[14,8]],
		[[2,9],[3,10],[4,11],[5,12],[6,13],[7,14],[8,15]]
	];
}

const m16 = (): arr2<number>[][] => {
	return [
		[[1,2],[4,3],[6,5],[7,8],[10,9],[11,12],[13,14],[16,15]],
		[[3,1],[2,4],[5,7],[8,6],[9,11],[12,10],[15,13],[14,16]],
		[[1,4],[2,3],[8,5],[7,6],[12,9],[11,10],[13,16],[14,15]],
		[[5,1],[6,2],[7,3],[8,4],[9,13],[10,14],[11,15],[12,16]],
		[[1,6],[2,7],[3,8],[4,5],[14,9],[15,10],[16,11],[13,12]],
		[[7,1],[8,2],[5,3],[6,4],[9,15],[10,16],[11,13],[12,14]],
		[[1,8],[2,5],[3,6],[4,7],[16,9],[13,10],[14,11],[15,12]],
		[[9,1],[10,2],[11,3],[12,4],[13,5],[14,6],[15,7],[16,8]],
		[[1,10],[2,11],[3,12],[4,13],[5,14],[6,15],[7,16],[8,9]],
		[[11,1],[12,2],[13,3],[14,4],[15,5],[16,6],[9,7],[10,8]],
		[[1,12],[2,13],[3,14],[4,15],[5,16],[6,9],[7,10],[8,11]],
		[[13,1],[14,2],[15,3],[16,4],[9,5],[10,6],[11,7],[12,8]],
		[[1,14],[2,15],[3,16],[4,9],[5,10],[6,11],[7,12],[8,13]],
		[[15,1],[16,2],[9,3],[10,4],[11,5],[12,6],[13,7],[14,8]],
		[[1,16],[2,9],[3,10],[4,11],[5,12],[6,13],[7,14],[8,15]]
	];
}

const m17 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4],[7,6],[8,3],[11,10],[13,14],[15,16],[12,17]],
		[[3,1],[2,5],[6,8],[4,9],[10,12],[14,11],[17,15],[16,7]],
		[[2,3],[1,4],[8,7],[9,6],[12,11],[13,10],[16,17],[5,14]],
		[[5,1],[4,3],[8,9],[7,2],[10,14],[12,13],[11,16],[6,15]],
		[[2,4],[3,5],[9,7],[1,6],[13,11],[14,12],[15,10],[8,17]],
		[[1,7],[2,8],[3,9],[5,6],[16,10],[17,11],[15,14],[4,13]],
		[[8,1],[9,2],[6,4],[7,5],[10,17],[13,15],[14,16],[12,3]],
		[[1,9],[3,6],[4,7],[5,8],[15,12],[16,13],[17,14],[2,11]],
		[[6,2],[7,3],[8,4],[9,5],[11,15],[12,16],[13,17],[10,1]],
		[[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[9,10]],
		[[12,1],[13,2],[14,3],[15,4],[16,5],[17,6],[10,8],[11,9]],
		[[1,13],[2,14],[3,15],[4,16],[5,17],[7,10],[8,11],[9,12]],
		[[14,1],[15,2],[16,3],[17,4],[10,6],[11,7],[12,8],[13,9]],
		[[1,15],[2,16],[3,17],[5,10],[6,11],[7,12],[8,13],[9,14]],
		[[16,1],[17,2],[10,4],[11,5],[12,6],[13,7],[14,8],[15,9]],
		[[1,17],[3,10],[4,11],[5,12],[6,13],[7,14],[8,15],[9,16]],
		[[10,2],[11,3],[12,4],[13,5],[14,6],[15,7],[16,8],[17,9]]
	];
}

const m18 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4],[7,6],[8,3],[11,10],[13,14],[15,16],[12,17],[9,18]],
		[[3,1],[2,5],[6,8],[4,9],[10,12],[14,11],[17,15],[18,13],[16,7]],
		[[2,3],[1,4],[8,7],[9,6],[12,11],[13,10],[16,17],[15,18],[5,14]],
		[[5,1],[4,3],[8,9],[7,2],[10,14],[12,13],[18,17],[11,16],[6,15]],
		[[2,4],[3,5],[9,7],[1,6],[13,11],[14,12],[16,18],[15,10],[8,17]],
		[[1,7],[2,8],[3,9],[5,6],[16,10],[17,11],[18,12],[15,14],[4,13]],
		[[8,1],[9,2],[6,4],[7,5],[10,17],[11,18],[13,15],[14,16],[12,3]],
		[[1,9],[3,6],[4,7],[5,8],[18,10],[15,12],[16,13],[17,14],[2,11]],
		[[6,2],[7,3],[8,4],[9,5],[11,15],[12,16],[13,17],[14,18],[10,1]],
		[[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,10]],
		[[12,1],[13,2],[14,3],[15,4],[16,5],[17,6],[18,7],[10,8],[11,9]],
		[[1,13],[2,14],[3,15],[4,16],[5,17],[6,18],[7,10],[8,11],[9,12]],
		[[14,1],[15,2],[16,3],[17,4],[18,5],[10,6],[11,7],[12,8],[13,9]],
		[[1,15],[2,16],[3,17],[4,18],[5,10],[6,11],[7,12],[8,13],[9,14]],
		[[16,1],[17,2],[18,3],[10,4],[11,5],[12,6],[13,7],[14,8],[15,9]],
		[[1,17],[2,18],[3,10],[4,11],[5,12],[6,13],[7,14],[8,15],[9,16]],
		[[18,1],[10,2],[11,3],[12,4],[13,5],[14,6],[15,7],[16,8],[17,9]]
	];
}

const m19 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4],[7,6],[9,10],[8,3],[12,11],[14,15],[16,17],[13,18]],
		[[3,1],[2,5],[6,8],[10,7],[4,9],[11,13],[15,12],[18,16],[19,14]],
		[[2,3],[1,4],[8,7],[9,6],[5,10],[13,12],[14,11],[17,18],[16,19]],
		[[5,1],[4,3],[6,10],[8,9],[7,2],[11,15],[13,14],[19,18],[12,17]],
		[[2,4],[3,5],[9,7],[10,8],[1,6],[14,12],[15,13],[17,19],[16,11]],
		[[1,7],[2,8],[3,9],[4,10],[5,6],[17,11],[18,12],[19,13],[16,15]],
		[[8,1],[9,2],[10,3],[6,4],[7,5],[11,18],[12,19],[14,16],[15,17]],
		[[1,9],[2,10],[3,6],[4,7],[5,8],[19,11],[16,13],[17,14],[18,15]],
		[[10,1],[6,2],[7,3],[8,4],[9,5],[12,16],[13,17],[14,18],[15,19]],
		[[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,19]],
		[[12,1],[13,2],[14,3],[15,4],[16,5],[17,6],[18,7],[19,8],[11,10]],
		[[1,13],[2,14],[3,15],[4,16],[5,17],[6,18],[7,19],[9,11],[10,12]],
		[[14,1],[15,2],[16,3],[17,4],[18,5],[19,6],[11,8],[12,9],[13,10]],
		[[1,15],[2,16],[3,17],[4,18],[5,19],[7,11],[8,12],[9,13],[10,14]],
		[[16,1],[17,2],[18,3],[19,4],[11,6],[12,7],[13,8],[14,9],[15,10]],
		[[1,17],[2,18],[3,19],[5,11],[6,12],[7,13],[8,14],[9,15],[10,16]],
		[[18,1],[19,2],[11,4],[12,5],[13,6],[14,7],[15,8],[16,9],[17,10]],
		[[1,19],[3,11],[4,12],[5,13],[6,14],[7,15],[8,16],[9,17],[10,18]],
		[[11,2],[12,3],[13,4],[14,5],[15,6],[16,7],[17,8],[18,9],[19,10]]
	];
}

const m20 = (): arr2<number>[][] => {
	return [
		[[1,2],[5,4],[7,6],[9,10],[8,3],[12,11],[14,15],[16,17],[20,19],[13,18]],
		[[3,1],[2,5],[6,8],[10,7],[4,9],[11,13],[15,12],[18,16],[17,20],[19,14]],
		[[2,3],[1,4],[8,7],[9,6],[5,10],[13,12],[14,11],[17,18],[16,19],[20,15]],
		[[5,1],[4,3],[6,10],[8,9],[7,2],[11,15],[13,14],[20,16],[19,18],[12,17]],
		[[2,4],[3,5],[9,7],[10,8],[1,6],[14,12],[15,13],[17,19],[18,20],[16,11]],
		[[1,7],[2,8],[3,9],[4,10],[5,6],[17,11],[18,12],[19,13],[20,14],[16,15]],
		[[8,1],[9,2],[10,3],[6,4],[7,5],[11,18],[12,19],[13,20],[14,16],[15,17]],
		[[1,9],[2,10],[3,6],[4,7],[5,8],[19,11],[20,12],[16,13],[17,14],[18,15]],
		[[10,1],[6,2],[7,3],[8,4],[9,5],[11,20],[12,16],[13,17],[14,18],[15,19]],
		[[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,19],[10,20]],
		[[12,1],[13,2],[14,3],[15,4],[16,5],[17,6],[18,7],[19,8],[20,9],[11,10]],
		[[1,13],[2,14],[3,15],[4,16],[5,17],[6,18],[7,19],[8,20],[9,11],[10,12]],
		[[14,1],[15,2],[16,3],[17,4],[18,5],[19,6],[20,7],[11,8],[12,9],[13,10]],
		[[1,15],[2,16],[3,17],[4,18],[5,19],[6,20],[7,11],[8,12],[9,13],[10,14]],
		[[16,1],[17,2],[18,3],[19,4],[20,5],[11,6],[12,7],[13,8],[14,9],[15,10]],
		[[1,17],[2,18],[3,19],[4,20],[5,11],[6,12],[7,13],[8,14],[9,15],[10,16]],
		[[18,1],[19,2],[20,3],[11,4],[12,5],[13,6],[14,7],[15,8],[16,9],[17,10]],
		[[1,19],[2,20],[3,11],[4,12],[5,13],[6,14],[7,15],[8,16],[9,17],[10,18]],
		[[20,1],[11,2],[12,3],[13,4],[14,5],[15,6],[16,7],[17,8],[18,9],[19,10]]
	];
}

const getBasicScheduling: (()=>arr2<number>[][])[] = [
	m2,
	m3,
	m4,
	m5,
	m6,
	m7,
	m8,
	m9,
	m10,
	m11,
	m12,
	m13,
	m14,
	m15,
	m16,
	m17,
	m18,
	m19,
	m20
]

export default robinRoundSchedulingFunction;

/**
 * algortihm
 */
const robinRoundAlgorithmImplementation = (n: number): arr2<number>[][] => {
	// n paridad
	let nIsPair: boolean = n % 2 === 0;
	n = (nIsPair) ? n : n +1;

	let out: arr2<number>[][] = [];
	let pivot: number[] = [];
	for (let i = 0; i < n; i++) {
		pivot.push(i+1);
	}

	const mnumber = n/2;
	for (let f = 1; f < n; f++) {
		console.log(f, 'pivot', pivot);
		let fech: arr2<number>[] = [];

		let fIsPair: boolean = f % 2 === 0;
		for (let j = 0; j < mnumber; j++) {
			let m: arr2<number> = [pivot[j], pivot[n-j-1]];
			if (fIsPair) m = reverse(m);
			if (n === 4 && j === mnumber-1) m = reverse(m);
			//m = (j === mnumber-1) ? reverse(m) : m;
			fech.push(m);
		}
		/** rotar pivot */
		pivot = [
			pivot[0], pivot[n-1],
			...pivot.slice(1,n-1)
		]
		out.push(fech);
	}

	if (!nIsPair) {
		let aux = [...out];
		out = [];
		aux.forEach((fech: arr2<number>[]) => {
			let newF: arr2<number>[] = [];
			fech.forEach((m: arr2<number>) => {
				if (m[0] !== n && m[1] !== n) newF.push(m)
			})
			out.push(newF);
		})
	}
	return out;
}